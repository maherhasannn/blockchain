import * as crypto from 'crypto';

class Transaction {
    constructor(
        public amount: number,
        public payer: string, //public key
        public payee: string //public key
        
        ) {}

        toString() {
            return JSON.stringify(this);
        }
}

class Block {

    public nonce = Math.round((Math.random() * 9999999999) ** 2 + Math.random() *32543232);


    constructor(
        public prevHash: string,
        public transaction: Transaction,
        public ts = Date.now() //time stamp
    ) {
        this.mine();
    }

    get hash() {
        const str = JSON.stringify(this);
        const hash = crypto.createHash('SHA256');
        hash.update(str).end();
        return hash.digest('hex');
    }

    mine() {
        console.log('⛏️ mining...');
        while (!this.hash.startsWith('0000')) {
            this.nonce++;
        }
        console.log(`Block mined: ${this.hash} (nonce: ${this.nonce})`);
    }

}

class Chain {
    public static instance = new Chain();

    chain: Block[];

    constructor() {
        this.chain = [new Block("", new Transaction(100, 'genesis', 'maher'))]
    } 

    get lastBlock() {
        return this.chain[this.chain.length - 1];
    }

    addBlock(transaction: Transaction, senderPublicKey: string, signature: Buffer) {
        const verifier = crypto.createVerify('SHA256');
        verifier.update(transaction.toString());
    
        const isValid = verifier.verify(senderPublicKey, signature);
    
        if (isValid) {
            const newBlock = new Block(this.lastBlock.hash, transaction);
    
            // ✅ Only add the block if it passes the mining proof-of-work
            if (newBlock.hash.startsWith('0000')) {
                this.chain.push(newBlock);
                console.log("✅ Block added to chain.");
            } else {
                console.log("❌ Block mining failed: Invalid hash.");
            }
        } else {
            console.log("❌ Invalid signature. Block rejected.");
        }
    }
    
    

    mine(nonce: number) {
        let solution = 1;
        console.log('⛏️mining...')
        
        while(true) {

            const hash = crypto.createHash('MD5');
            hash.update((nonce + solution ).toString()).end();

            const attempt = hash.digest('hex');

            if(attempt.substr(0,4)== '0000'){
                console.log("Solved")
                console.log(solution);
                return solution;
            }
            solution += 1;
        }
    }

}

class Wallet {
    public publicKey: string;
    public privateKey: string;

    constructor() {
        const keypair = crypto.generateKeyPairSync('rsa', {
            modulusLength: 2048,
            publicKeyEncoding: {type: 'spki', format: 'pem'}, 
            privateKeyEncoding: {type: 'pkcs8', format: 'pem'},

        });

        this.privateKey = keypair.privateKey;
        this.publicKey = keypair.publicKey;
    }

        sendMoney(amount: number, payeePublicKey: string) {
            const transaction = new Transaction(amount, this.publicKey, payeePublicKey);
            const sign = crypto.createSign('SHA256');
            sign.update(transaction.toString()).end()

            const signature = sign.sign(this.privateKey);
            Chain.instance.addBlock(transaction, this.publicKey, signature);


        }

    }


const m = new Wallet();
const n = new Wallet();
const p = new Wallet();

m.sendMoney(50, n.publicKey);
n.sendMoney(25, p.publicKey);
n.sendMoney(25, p.publicKey);
p.sendMoney(5, m.publicKey);


console.log(Chain.instance)
